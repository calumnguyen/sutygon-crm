import { NextResponse } from 'next/server';
import { withAuth, AuthenticatedRequest } from '@/lib/utils/authMiddleware';
import OpenAI from 'openai';
import { db } from '@/lib/db';
import { inventoryItems, tags, inventoryTags, aiTrainingData } from '@/lib/db/schema';
import { eq, inArray } from 'drizzle-orm';
import { decryptTagData } from '@/lib/utils/inventoryEncryption';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Function to extract Vietnamese patterns and motifs from text intelligently
function extractVietnamesePatterns(text: string): string[] {
  const patterns: string[] = [];
  const lowerText = text.toLowerCase();

  // High-priority Vietnamese cultural patterns that should be recognized first
  const highPriorityPatterns = [
    'g·∫°ch men',
    'hoa sen',
    'chim h·∫°c',
    'ch·ªØ th·ªç',
    't·ª© linh',
    't·ª© qu√Ω',
    'b√°t b·ª≠u',
    'ph∆∞·ª£ng ho√†ng',
    'r·ªìng',
    'l√¢n',
    'hoa mai',
    'hoa ƒë√†o',
    'hoa c√∫c',
    'hoa lan',
    'hoa h·ªìng',
    'hoa hu·ªá',
    'hoa ly',
    'm·∫´u ƒë∆°n',
    'k·∫ª √¥',
    '√¥ vu√¥ng',
    'h√¨nh vu√¥ng',
    'song long',
    'long ph·ª•ng',
    'ng≈© ph√∫c',
    'b√°t ti√™n',
    'ch·ªØ ph√∫c',
    'ch·ªØ l·ªôc',
    'ch·ªØ khang',
  ];

  // Check for high-priority patterns first
  for (const pattern of highPriorityPatterns) {
    if (lowerText.includes(pattern)) {
      patterns.push(pattern);
    }
  }

  // Common Vietnamese pattern keywords that indicate cultural motifs
  const patternIndicators = [
    'hoa vƒÉn',
    'h·ªça ti·∫øt',
    'motif',
    'pattern',
    'design',
    'th√™u',
    'embroidery',
    'hoa',
    'flower',
    'chim',
    'bird',
    'r·ªìng',
    'dragon',
    'ph∆∞·ª£ng',
    'phoenix',
    'ch·ªØ',
    'letter',
    'k√Ω t·ª±',
    'symbol',
    'bi·ªÉu t∆∞·ª£ng',
    'truy·ªÅn th·ªëng',
    'traditional',
    'vƒÉn h√≥a',
    'cultural',
    'd√¢n t·ªôc',
    'ethnic',
    'c·ªï truy·ªÅn',
    'ancient',
    'g·∫°ch',
    'men',
  ];

  // Extract potential patterns by looking for descriptive phrases
  const words = lowerText.split(/\s+/);

  for (let i = 0; i < words.length - 1; i++) {
    const currentWord = words[i];
    const nextWord = words[i + 1];

    // Look for pattern indicators followed by descriptive words
    if (patternIndicators.includes(currentWord) && nextWord) {
      const potentialPattern = `${currentWord} ${nextWord}`;
      if (!patterns.includes(potentialPattern)) {
        patterns.push(potentialPattern);
      }
    }

    // Look for standalone cultural words
    if (currentWord.length > 2 && isVietnameseCulturalWord(currentWord)) {
      if (!patterns.includes(currentWord)) {
        patterns.push(currentWord);
      }
    }
  }

  // Also extract any words that appear to be cultural patterns based on context
  const culturalContextWords = extractCulturalContextWords(lowerText);
  patterns.push(...culturalContextWords);

  // Remove duplicates and limit to top 15 patterns
  const uniquePatterns = [...new Set(patterns)];
  return uniquePatterns.slice(0, 15);
}

// Function to check if a word is likely a Vietnamese cultural term
function isVietnameseCulturalWord(word: string): boolean {
  // Vietnamese cultural words often have specific characteristics
  const culturalSuffixes = ['sen', 'mai', 'ƒë√†o', 'c√∫c', 'lan', 'h·ªìng', 'hu·ªá', 'ly'];
  const culturalPrefixes = ['hoa', 'chim', 'ch·ªØ', 't·ª©', 'b√°t', 'ng≈©', 'song'];

  return (
    culturalSuffixes.some((suffix) => word.endsWith(suffix)) ||
    culturalPrefixes.some((prefix) => word.startsWith(prefix)) ||
    (word.length >= 4 &&
      /[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë]/.test(word))
  );
}

// Function to extract cultural context words from text
function extractCulturalContextWords(text: string): string[] {
  const culturalWords: string[] = [];

  // Look for phrases that describe cultural elements
  const culturalPhrases = [
    /hoa vƒÉn\s+(\w+)/g,
    /h·ªça ti·∫øt\s+(\w+)/g,
    /th√™u\s+(\w+)/g,
    /ch·ªØ\s+(\w+)/g,
    /(\w+)\s+hoa/g,
    /(\w+)\s+chim/g,
    /(\w+)\s+long/g,
    /(\w+)\s+ph∆∞·ª£ng/g,
  ];

  culturalPhrases.forEach((regex) => {
    const matches = text.match(regex);
    if (matches) {
      matches.forEach((match) => {
        const word = match.split(/\s+/)[1];
        if (word && word.length > 2 && !culturalWords.includes(word)) {
          culturalWords.push(word);
        }
      });
    }
  });

  return culturalWords;
}

// Cache for inventory knowledge base
let inventoryKnowledgeBase: string[] = [];
let lastCacheUpdate = 0;
const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes

// Store verification status for AI search
// Note: This is in-memory storage and will be cleared when the server restarts
const aiSearchVerifications = new Map<string, { verified: boolean; expiresAt: number }>();

async function buildInventoryKnowledgeBase() {
  const now = Date.now();
  if (now - lastCacheUpdate < CACHE_DURATION && inventoryKnowledgeBase.length > 0) {
    return inventoryKnowledgeBase;
  }

  try {
    // Try to get training data first (if available)
    const trainingData = await db
      .select({
        name: aiTrainingData.name,
        category: aiTrainingData.category,
        imageUrl: aiTrainingData.imageUrl,
        tags: aiTrainingData.tags,
        description: aiTrainingData.description,
      })
      .from(aiTrainingData)
      .where(eq(aiTrainingData.isActive, true))
      .limit(100);

    if (trainingData.length > 0) {
      // Use training data with enhanced pattern recognition
      const knowledgeEntries = trainingData.map((item) => {
        const tags = item.tags ? JSON.parse(item.tags) : [];
        const hasImage = item.imageUrl ? 'C√≥ h√¨nh ·∫£nh' : 'Kh√¥ng c√≥ h√¨nh ·∫£nh';

        // Extract Vietnamese patterns and motifs from description
        const description = item.description || '';
        const patterns = extractVietnamesePatterns(description);

        return `S·∫¢N PH·∫®M: ${item.name} | DANH M·ª§C: ${item.category} | H√åNH ·∫¢NH: ${hasImage} | HOA VƒÇN: ${patterns.join(', ')} | TAGS: ${tags.join(', ')} | M√î T·∫¢: ${item.description}`;
      });

      inventoryKnowledgeBase = knowledgeEntries;
      lastCacheUpdate = now;

      console.log(`Using training data with ${knowledgeEntries.length} items`);
      return knowledgeEntries;
    } else {
      // Fallback to sample data with pattern extraction
      const sampleItems = await db
        .select({
          id: inventoryItems.id,
          name: inventoryItems.name,
          category: inventoryItems.category,
          imageUrl: inventoryItems.imageUrl,
        })
        .from(inventoryItems)
        .limit(100);

      // Get tags for these items
      const itemIds = sampleItems.map((item) => item.id);
      const itemTags = await db
        .select({
          itemId: inventoryTags.itemId,
          tagName: tags.name,
        })
        .from(inventoryTags)
        .innerJoin(tags, eq(inventoryTags.tagId, tags.id))
        .where(inArray(inventoryTags.itemId, itemIds));

      // Group tags by item
      const tagsByItem = itemTags.reduce(
        (acc, tag) => {
          if (!acc[tag.itemId]) acc[tag.itemId] = [];
          acc[tag.itemId].push(decryptTagData({ name: tag.tagName }).name);
          return acc;
        },
        {} as Record<number, string[]>
      );

      // Build knowledge base entries with pattern recognition
      const knowledgeEntries = sampleItems.map((item) => {
        const itemTags = tagsByItem[item.id] || [];
        const hasImage = item.imageUrl ? 'C√≥ h√¨nh ·∫£nh' : 'Kh√¥ng c√≥ h√¨nh ·∫£nh';

        // Extract patterns from item name and tags
        const allText = `${item.name} ${itemTags.join(' ')}`;
        const patterns = extractVietnamesePatterns(allText);

        return `S·∫¢N PH·∫®M: ${item.name} | DANH M·ª§C: ${item.category} | H√åNH ·∫¢NH: ${hasImage} | HOA VƒÇN: ${patterns.join(', ')} | TAGS: ${itemTags.join(', ')}`;
      });

      inventoryKnowledgeBase = knowledgeEntries;
      lastCacheUpdate = now;

      console.log(`Built knowledge base with ${knowledgeEntries.length} items`);
      return knowledgeEntries;
    }
  } catch (error) {
    console.error('Failed to build knowledge base:', error);
    return [];
  }
}

export const POST = withAuth(async (request: AuthenticatedRequest) => {
  try {
    const contentType = request.headers.get('content-type') || '';

    // Check if this is a verification check request (JSON)
    if (contentType.includes('application/json')) {
      const body = await request.json();
      if (body.checkVerification) {
        console.log('üîç API: Verification check requested');
        console.log('üîç API: Verification map size:', aiSearchVerifications.size);
        console.log(
          'üîç API: Verification map entries:',
          Array.from(aiSearchVerifications.entries())
        );

        // Check if user has verified AI search access
        const userId = request.user?.id?.toString() || 'unknown';
        console.log('üîç API: User ID:', userId);
        const verification = aiSearchVerifications.get(userId);
        console.log('üîç API: Verification status:', verification);
        console.log('üîç API: Current time:', Date.now());

        // Check if verification exists, is verified, and not expired
        const isVerified =
          verification && verification.verified && Date.now() <= verification.expiresAt;

        console.log('üîç API: Is verified:', isVerified);

        if (!isVerified) {
          console.log('üîí API: Verification required, returning 403');
          return NextResponse.json(
            {
              error: 'Y√™u c·∫ßu x√°c th·ª±c',
              reason: 'verification_required',
              message: 'B·∫°n c·∫ßn x√°c th·ª±c ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng Sutygon-Bot',
            },
            { status: 403 }
          );
        }

        console.log('‚úÖ API: Verification successful');
        return NextResponse.json({
          success: true,
          message: 'ƒê√£ x√°c th·ª±c Sutygon-Bot',
        });
      }
    }

    // For form data (actual image search)
    if (contentType.includes('multipart/form-data')) {
      // Check if user has verified AI search access for actual search
      const userId = request.user?.id?.toString() || 'unknown';
      const verification = aiSearchVerifications.get(userId);

      if (!verification || !verification.verified || Date.now() > verification.expiresAt) {
        return NextResponse.json(
          {
            error: 'Y√™u c·∫ßu x√°c th·ª±c',
            reason: 'verification_required',
            message: 'B·∫°n c·∫ßn x√°c th·ª±c ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng Sutygon-Bot',
          },
          { status: 403 }
        );
      }

      const formData = await request.formData();
      const imageFile = formData.get('image') as File;
      const userQuery = (formData.get('query') as string) || '';

      if (!imageFile) {
        return NextResponse.json({ error: 'Kh√¥ng c√≥ h√¨nh ·∫£nh ƒë∆∞·ª£c cung c·∫•p' }, { status: 400 });
      }

      if (!imageFile.type.startsWith('image/')) {
        return NextResponse.json(
          { error: 'Lo·∫°i t·ªáp kh√¥ng h·ª£p l·ªá. Ch·ªâ cho ph√©p t·ªáp h√¨nh ·∫£nh.' },
          { status: 400 }
        );
      }

      // Build inventory knowledge base
      const knowledgeBase = await buildInventoryKnowledgeBase();
      const knowledgeContext = knowledgeBase.slice(0, 20).join('\n'); // Use top 20 items for context

      // Convert image to base64
      const arrayBuffer = await imageFile.arrayBuffer();
      const base64 = Buffer.from(arrayBuffer).toString('base64');
      const dataUrl = `data:${imageFile.type};base64,${base64}`;

      // Also search the database for items with relevant patterns
      let databaseSearchResults: Record<string, unknown>[] = [];
      let patterns: string[] = []; // Move to outer scope
      try {
        // First, let the AI analyze the image to identify patterns
        const imageAnalysisPrompt = `
B·∫°n l√† chuy√™n gia ph√¢n t√≠ch h√¨nh ·∫£nh th·ªùi trang Vi·ªát Nam. H√£y ph√¢n t√≠ch h√¨nh ·∫£nh n√†y v√† x√°c ƒë·ªãnh c√°c hoa vƒÉn vƒÉn h√≥a Vi·ªát Nam c√≥ th·ªÉ nh√¨n th·∫•y.

ƒê·∫∑c bi·ªát ch√∫ √Ω ƒë·∫øn c√°c hoa vƒÉn sau:
- "g·∫°ch men" (hoa vƒÉn g·∫°ch mosaic)
- "hoa sen" (hoa sen)
- "chim h·∫°c" (chim h·∫°c)
- "ch·ªØ th·ªç" (ch·ªØ th·ªç)
- "t·ª© linh" (r·ªìng, l√¢n, quy, ph·ª•ng)
- "t·ª© qu√Ω" (mai, lan, c√∫c, tr√∫c)
- "b√°t b·ª≠u" (8 b·∫£o v·∫≠t)
- "ph∆∞·ª£ng ho√†ng" (ph∆∞·ª£ng ho√†ng)
- "r·ªìng" (r·ªìng)
- "l√¢n" (l√¢n)

Tr·∫£ l·ªùi b·∫±ng JSON v·ªõi format:
{
  "patterns": ["hoa vƒÉn 1", "hoa vƒÉn 2"],
  "colors": ["m√†u ch√≠nh", "m√†u ph·ª•"],
  "style": "phong c√°ch",
  "description": "m√¥ t·∫£ ng·∫Øn g·ªçn"
}

Ch·ªâ tr·∫£ l·ªùi b·∫±ng JSON, kh√¥ng c√≥ text kh√°c.
        `;

        const imageAnalysisResponse = await openai.chat.completions.create({
          model: 'gpt-4o',
          messages: [
            {
              role: 'user',
              content: [
                {
                  type: 'text',
                  text: imageAnalysisPrompt,
                },
                {
                  type: 'image_url',
                  image_url: {
                    url: dataUrl,
                  },
                },
              ],
            },
          ],
          max_tokens: 300,
        });

        console.log('üîç Full AI response object:', JSON.stringify(imageAnalysisResponse, null, 2));
        console.log('üîç AI response choices:', imageAnalysisResponse.choices);
        console.log('üîç AI response usage:', imageAnalysisResponse.usage);

        const imageAnalysis = imageAnalysisResponse.choices[0]?.message?.content;
        console.log('üîç Raw AI image analysis response:', imageAnalysis);

        // Check if AI response is empty or contains error
        if (!imageAnalysis) {
          console.error('üîç AI returned empty response');
          throw new Error('AI returned empty response');
        }

        if (
          imageAnalysis.toLowerCase().includes("i'm sorry") ||
          imageAnalysis.toLowerCase().includes("can't assist") ||
          imageAnalysis.toLowerCase().includes('cannot assist')
        ) {
          console.error('üîç AI rejected the request:', imageAnalysis);
          throw new Error(`AI rejected the request: ${imageAnalysis}`);
        }

        // Extract patterns from the analysis
        try {
          if (imageAnalysis) {
            console.log('üîç Attempting to parse AI response as JSON:', imageAnalysis);
            const analysis = JSON.parse(imageAnalysis);
            patterns = analysis.patterns || [];
            console.log('üîç Parsed AI analysis:', analysis);
            console.log('üîç Extracted patterns from AI analysis:', patterns);
          }
        } catch (parseError) {
          console.error('üîç Failed to parse image analysis as JSON:', parseError);
          console.log('üîç Raw analysis that failed to parse:', imageAnalysis);

          // Try to extract patterns from text response if JSON parsing fails
          if (imageAnalysis) {
            console.log('üîç Attempting to extract patterns from text response...');
            const textPatterns = extractVietnamesePatterns(imageAnalysis);
            if (textPatterns.length > 0) {
              patterns = textPatterns;
              console.log('üîç Extracted patterns from text response:', patterns);
            } else {
              console.log('üîç No patterns could be extracted from text response');
            }
          }
        }

        // If no patterns found, use default Vietnamese patterns
        if (patterns.length === 0) {
          patterns = [
            'g·∫°ch men',
            'hoa sen',
            'chim h·∫°c',
            'ch·ªØ th·ªç',
            't·ª© linh',
            't·ª© qu√Ω',
            'b√°t b·ª≠u',
            'ph∆∞·ª£ng ho√†ng',
            'r·ªìng',
            'l√¢n',
          ];
          console.log('üîç No patterns found in AI analysis, using default patterns:', patterns);
        }

        console.log('üîç Final patterns to search for:', patterns);

        // Search for items with the identified patterns
        for (const pattern of patterns) {
          console.log(`üîç Searching for pattern: "${pattern}"`);
          const searchUrl = `${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/api/inventory/search-typesense?q=${encodeURIComponent(pattern)}&limit=5`;
          console.log(`üîç Search URL: ${searchUrl}`);

          const searchResponse = await fetch(searchUrl, {
            headers: {
              Authorization: `Bearer ${request.headers.get('authorization')}`,
            },
          });

          console.log(`üîç Search response status for "${pattern}":`, searchResponse.status);
          console.log(
            `üîç Search response headers:`,
            Object.fromEntries(searchResponse.headers.entries())
          );

          if (searchResponse.ok) {
            const searchData = await searchResponse.json();
            console.log(`üîç Search data for "${pattern}":`, JSON.stringify(searchData, null, 2));
            if (searchData.items && searchData.items.length > 0) {
              console.log(
                `üîç Found ${searchData.items.length} items for pattern "${pattern}":`,
                searchData.items.map((item: Record<string, unknown>) => item.name as string)
              );
              databaseSearchResults.push(...searchData.items);
            } else {
              console.log(
                `üîç No items found for pattern "${pattern}" - search returned empty results`
              );
            }
          } else {
            const errorText = await searchResponse.text();
            console.log(
              `üîç Search failed for pattern "${pattern}":`,
              searchResponse.status,
              searchResponse.statusText,
              errorText
            );
          }
        }

        // Remove duplicates
        databaseSearchResults = databaseSearchResults.filter(
          (item, index, self) => index === self.findIndex((t) => t.id === item.id)
        );

        console.log(
          `üîç Database search found ${databaseSearchResults.length} items with patterns:`,
          patterns
        );
      } catch (searchError) {
        console.warn('Database search failed:', searchError);
      }

      // Enhanced prompt with inventory knowledge
      const prompt = `
B·∫°n l√† m·ªôt chuy√™n gia th·ªùi trang Vi·ªát Nam chuy√™n v·ªÅ √°o d√†i v√† trang ph·ª•c truy·ªÅn th·ªëng. B·∫°n c√≥ ki·∫øn th·ª©c s√¢u r·ªông v·ªÅ kho h√†ng Sutygon v√† c√°c hoa vƒÉn vƒÉn h√≥a Vi·ªát Nam.

=== KI·∫æN TH·ª®C V·ªÄ KHO H√ÄNG SUTYGON ===
${knowledgeContext}
=== H·∫æT KI·∫æN TH·ª®C KHO H√ÄNG ===

${
  databaseSearchResults.length > 0
    ? `
=== K·∫æT QU·∫¢ T√åM KI·∫æM C∆† S·ªû D·ªÆ LI·ªÜU ===
${databaseSearchResults.map((item) => `S·∫¢N PH·∫®M: ${item.name} | DANH M·ª§C: ${item.category} | ID: ${item.formattedId}`).join('\n')}
=== H·∫æT K·∫æT QU·∫¢ T√åM KI·∫æM ===
`
    : ''
}

NHI·ªÜM V·ª§: Ph√¢n t√≠ch h√¨nh ·∫£nh n√†y v√† t√¨m s·∫£n ph·∫©m t∆∞∆°ng t·ª± nh·∫•t trong kho h√†ng Sutygon, s·ª≠ d·ª•ng ki·∫øn th·ª©c v·ªÅ hoa vƒÉn t·ª´ d·ªØ li·ªáu hu·∫•n luy·ªán.

QUY T·∫ÆC PH√ÇN T√çCH:
1. **∆Øu ti√™n hoa vƒÉn vƒÉn h√≥a**: T√¨m ki·∫øm c√°c hoa vƒÉn ƒë·∫∑c tr∆∞ng nh∆∞ "g·∫°ch men", "hoa sen", "chim h·∫°c", "ch·ªØ th·ªç", "t·ª© linh", v.v.
2. **S·ª≠ d·ª•ng t·ª´ v·ª±ng ch√≠nh x√°c**: D√πng ƒë√∫ng t√™n hoa vƒÉn Vi·ªát Nam nh∆∞ "g·∫°ch men" cho hoa vƒÉn g·∫°ch, "hoa sen" cho hoa sen, v.v.
3. **So s√°nh ch√≠nh x√°c**: Kh·ªõp hoa vƒÉn, m√†u s·∫Øc, ch·∫•t li·ªáu v·ªõi s·∫£n ph·∫©m trong kho h√†ng
4. **Ch·ªâ ƒë·ªÅ xu·∫•t s·∫£n ph·∫©m th·ª±c**: Kh√¥ng t·∫°o s·∫£n ph·∫©m kh√¥ng c√≥ trong kho h√†ng

PH√ÇN T√çCH CHI TI·∫æT:
- **Lo·∫°i s·∫£n ph·∫©m**: X√°c ƒë·ªãnh ch√≠nh x√°c t·ª´ danh m·ª•c c√≥ s·∫µn
- **Hoa vƒÉn**: T√¨m ki·∫øm v√† s·ª≠ d·ª•ng t√™n hoa vƒÉn ch√≠nh x√°c nh∆∞ "g·∫°ch men", "hoa sen", "chim h·∫°c", "ch·ªØ th·ªç", "t·ª© linh", "t·ª© qu√Ω", "b√°t b·ª≠u"
- **M√†u s·∫Øc**: Li·ªát k√™ m√†u ch√≠nh v√† m√†u ph·ª• c√≥ th·ªÉ nh√¨n th·∫•y
- **Ch·∫•t li·ªáu**: X√°c ƒë·ªãnh t·ª´ m√¥ t·∫£ s·∫£n ph·∫©m (l·ª•a, g·∫•m, th·ªï c·∫©m, v.v.)
- **Phong c√°ch**: Truy·ªÅn th·ªëng, hi·ªán ƒë·∫°i, trang tr·ªçng, th∆∞·ªùng ng√†y
- **ƒê·∫∑c ƒëi·ªÉm**: C·ªï √°o, tay √°o, ƒë∆∞·ªùng may, chi ti·∫øt ƒë·∫∑c bi·ªát

${userQuery ? `Y√äU C·∫¶U C·ª§ TH·ªÇ: ${userQuery}` : ''}

TR·∫¢ L·ªúI B·∫∞NG JSON:
{
  "description": "M√¥ t·∫£ t·ªïng quan v·ªÅ s·∫£n ph·∫©m trong h√¨nh, s·ª≠ d·ª•ng t·ª´ v·ª±ng t∆∞∆°ng t·ª± nh∆∞ trong kho h√†ng",
  "category": "Danh m·ª•c ch√≠nh x√°c (ch·ªâ ch·ªçn t·ª´: √Åo d√†i, √Åo s∆° mi, Qu·∫ßn, V√°y, √Åo kho√°c, Ph·ª• ki·ªán)",
  "colors": ["M√†u ch√≠nh", "M√†u ph·ª•"],
  "pattern": "M√¥ t·∫£ hoa vƒÉn s·ª≠ d·ª•ng t√™n ch√≠nh x√°c nh∆∞ 'g·∫°ch men', 'hoa sen', 'chim h·∫°c', 'ch·ªØ th·ªç', v.v.",
  "style": "Phong c√°ch",
  "materials": ["Ch·∫•t li·ªáu ch√≠nh"],
  "features": ["ƒê·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t"],
  "keywords": ["T·ª´ kh√≥a 1", "T·ª´ kh√≥a 2", "T·ª´ kh√≥a 3"],
  "similarItems": ["T√™n s·∫£n ph·∫©m T∆Ø∆†NG T·ª∞ NH·∫§T t·ª´ kho h√†ng", "T√™n s·∫£n ph·∫©m th·ª© 2 n·∫øu c√≥"]
}

QUAN TR·ªåNG:
- T·∫•t c·∫£ gi√° tr·ªã ph·∫£i b·∫±ng ti·∫øng Vi·ªát
- "similarItems" ch·ªâ ch·ª©a t√™n s·∫£n ph·∫©m C√ì TH·ª∞C trong kho h√†ng Sutygon
- S·ª≠ d·ª•ng t√™n hoa vƒÉn ch√≠nh x√°c nh∆∞ "g·∫°ch men", "hoa sen", "chim h·∫°c", "ch·ªØ th·ªç", "t·ª© linh", v.v.
- ∆Øu ti√™n s·∫£n ph·∫©m c√≥ hoa vƒÉn t∆∞∆°ng t·ª± t·ª´ tr∆∞·ªùng "HOA VƒÇN"
- N·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m t∆∞∆°ng t·ª±, ƒë·ªÉ tr·ªëng "similarItems"
- T·∫≠p trung v√†o ƒë·ªô ch√≠nh x√°c, kh√¥ng t·∫°o th√¥ng tin gi·∫£
- ∆Øu ti√™n s·∫£n ph·∫©m c√≥ h√¨nh ·∫£nh trong kho h√†ng
- H·ªçc v√† s·ª≠ d·ª•ng c√°c hoa vƒÉn t·ª´ d·ªØ li·ªáu hu·∫•n luy·ªán thay v√¨ danh s√°ch c·ªë ƒë·ªãnh
- ƒê·∫∑c bi·ªát ch√∫ √Ω ƒë·∫øn hoa vƒÉn "g·∫°ch men" khi th·∫•y hoa vƒÉn g·∫°ch mosaic
`;

      // Call OpenAI Vision API
      const response = await openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          {
            role: 'user',
            content: [
              {
                type: 'text',
                text: prompt,
              },
              {
                type: 'image_url',
                image_url: {
                  url: dataUrl,
                },
              },
            ],
          },
        ],
        max_tokens: 800,
      });

      const aiResponse = response.choices[0]?.message?.content;

      if (!aiResponse) {
        return NextResponse.json({ error: 'Ph√¢n t√≠ch AI th·∫•t b·∫°i' }, { status: 500 });
      }

      // Parse the JSON response
      let analysis;
      try {
        // Extract JSON from the response (in case there's extra text)
        const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          analysis = JSON.parse(jsonMatch[0]);
        } else {
          throw new Error('No JSON found in response');
        }
      } catch {
        console.error('Failed to parse AI response:', aiResponse);
        return NextResponse.json(
          {
            error: 'Kh√¥ng th·ªÉ ph√¢n t√≠ch k·∫øt qu·∫£ AI',
            rawResponse: aiResponse,
          },
          { status: 500 }
        );
      }

      return NextResponse.json({
        success: true,
        analysis,
        rawResponse: aiResponse,
        knowledgeBaseSize: knowledgeBase.length,
        databaseSearchResults: databaseSearchResults.slice(0, 10), // Include up to 10 database search results
        searchTermsUsed: patterns, // Use the patterns found by AI
        debug: {
          patternsFound: patterns,
          databaseSearchCount: databaseSearchResults.length,
          databaseSearchItems: databaseSearchResults.map((item: Record<string, unknown>) => ({
            id: item.id,
            name: item.name,
            category: item.category,
          })),
          searchUrls: patterns.map(
            (pattern) =>
              `${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/api/inventory/search-typesense?q=${encodeURIComponent(pattern)}&limit=5`
          ),
        },
      });
    }

    // If neither JSON nor form data, return error
    return NextResponse.json(
      {
        error: 'Content type kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£',
      },
      { status: 400 }
    );
  } catch (error) {
    console.error('AI visual search error:', error);
    return NextResponse.json(
      {
        error: 'Ph√¢n t√≠ch AI th·∫•t b·∫°i',
        details: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    );
  }
});

// Endpoint to mark AI search as verified for a user
export const PUT = withAuth(async (request: AuthenticatedRequest) => {
  try {
    let body: Record<string, unknown> = {};
    try {
      body = await request.json();
    } catch {
      console.log('‚ö†Ô∏è No JSON body in PUT request, using empty object');
    }

    // Debug endpoint to clear verification map
    if (body.clearVerification) {
      aiSearchVerifications.clear();
      console.log('üßπ Cleared verification map');
      return NextResponse.json({
        success: true,
        message: 'Verification map cleared',
      });
    }

    const userId = request.user?.id?.toString() || 'unknown';

    // Mark user as verified for AI search (valid for 1 hour)
    aiSearchVerifications.set(userId, {
      verified: true,
      expiresAt: Date.now() + 60 * 60 * 1000, // 1 hour
    });

    console.log('‚úÖ User verified for AI search:', userId);

    return NextResponse.json({
      success: true,
      message: 'X√°c th·ª±c Sutygon-Bot th√†nh c√¥ng',
    });
  } catch (error) {
    console.error('AI search verification error:', error);
    return NextResponse.json({ error: 'X√°c th·ª±c th·∫•t b·∫°i' }, { status: 500 });
  }
});
